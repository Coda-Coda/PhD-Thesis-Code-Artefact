event
    | Transfer (_from : address indexed) (_to : address indexed) (_value : int)
    | Approval (_owner : address indexed) (_spender : address indexed) (_value : int)

object signature ERC20WrappedEthSig = {
    const totalSupply : unit -> int;
    const balanceOf : address -> int;
    transfer : address * int -> bool;
    transferFrom : address * address * int -> bool;
    const allowance : address * address -> int;
    approve : address * int -> bool;
    approveSafely : address * int * int -> bool;
    mint : unit -> bool;
    burn : int -> bool
}

object ERC20WrappedEth () : ERC20WrappedEthSig {
    let wrapped : mapping[address] int := mapping_init
    let allowances : mapping[address] mapping[address] int := mapping_init
    let _totalSupply : int := 0
   

    let totalSupply () =
      _totalSupply
    
    let balanceOf(_owner) = 
      wrapped[_owner]
    
    let transfer(_to, _value) =
      assert(_value >= 0);
      assert(msg_sender <> this_address);
      assert(msg_sender <> _to);
      assert(msg_value = 0);
      let wrapped_amount_from = wrapped[msg_sender] in
      let wrapped_amount_to = wrapped[_to] in
      assert(wrapped_amount_from >= _value);
      wrapped[_to] := wrapped_amount_to + _value;
      wrapped[msg_sender] := wrapped_amount_from - _value;
      emit Transfer(msg_sender, _to, _value);
      true

    let transferFrom(_from, _to, _value) =
      assert(_value >= 0);
      assert(_from <> this_address);
      assert(_from <> _to);
      assert(msg_value = 0);
      let approved_amount = allowances[msg_sender][_from] in
      assert(approved_amount >= _value);
      allowances[msg_sender][_from] := approved_amount - _value;
      let wrapped_amount_from = wrapped[_from] in
      let wrapped_amount_to = wrapped[_to] in
      assert(wrapped_amount_from >= _value);
      wrapped[_to] := wrapped_amount_to + _value;
      wrapped[_from] := wrapped_amount_from - _value;
      emit Transfer(_from, _to, _value);
      true

    let allowance(_owner, _spender) = 
      allowances[_owner][_spender]
    
    let approve (_spender, _value) = 
      assert(_value >= 0);
      allowances[msg_sender][_spender] := _value;
      emit Approval(msg_sender, _spender, _value);
      true

    let approveSafely (_spender, _currentValue, _value) = 
      assert(_value >= 0);
      let actualCurrentValue = allowances[msg_sender][_spender] in
      if (_currentValue = actualCurrentValue) then
        begin
          allowances[msg_sender][_spender] := _value;
          emit Approval(msg_sender, _spender, _value);
          true
        end
      else
        false

    let mint () =
      assert(msg_sender <> this_address);
      assert(msg_value > 0);

      let wrapped_amount = wrapped[msg_sender] in
      wrapped[msg_sender] := wrapped_amount + msg_value;
      let prev_totalSupply = _totalSupply in
      _totalSupply := prev_totalSupply + msg_value;
      emit Transfer(address(0x0), msg_sender, msg_value);
      true
    
    let burn (_value) =
      assert(_value >= 0);
      assert(msg_sender <> this_address);
      assert(msg_value = 0);

      let wrapped_amount = wrapped[msg_sender] in
      assert(wrapped_amount >= _value);
      wrapped[msg_sender] := wrapped_amount - _value;
      let prev_totalSupply = _totalSupply in
      _totalSupply := prev_totalSupply - _value;
      transferEth(msg_sender, _value);
      emit Transfer(msg_sender, address(0x0), _value);
      true
}

layer CONTRACT : [ { } ]  {erc20wrappedeth : ERC20WrappedEthSig}  = {
    erc20wrappedeth = ERC20WrappedEth
}