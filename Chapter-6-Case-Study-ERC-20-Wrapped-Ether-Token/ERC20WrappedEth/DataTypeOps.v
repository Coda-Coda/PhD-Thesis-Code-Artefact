(* WARNING: This file is generated by Edsger, the DeepSEA compiler.
            All modification will be lost when regenerating. *)
(* Module ERC20WrappedEth.DataTypeOps for ERC20WrappedEth.ds *)
Require Import BinPos.
Require Import DeepSpec.Runtime.
Require Import ERC20WrappedEth.EdsgerIdents.
Require Import ERC20WrappedEth.DataTypes.

Section EdsgerGen.

Definition thash_int_HASH_address_Z32 := (Tpair HASH_address_Z32 (Thashmap tint tint)).
Global Instance thash_int_HASH_address_Z32_hyper_type_impl : HyperTypeImpl thash_int_HASH_address_Z32 :=
   Int256Tree_based_hashmap_hyper_type_impl tint_Z32.
Definition hash_int_HASH_address_Z32_pair := mk_hyper_type_pair thash_int_HASH_address_Z32.
Global Instance thash_int_HASH_address_Z32_hyper_type : HyperType thash_int_HASH_address_Z32 :=
  Int256Tree_based_hashmap_hyper_type tint_Z32.
Global Instance thash_int_HASH_address_Z32_index_impl : HyperIntHashImpl thash_int_HASH_address_Z32 tint_Z32 :=
  Int256Tree_based_hashmap_hash_impl tint_Z32.
Global Instance thash_int_HASH_address_Z32_hash : HyperIntHash thash_int_HASH_address_Z32 tint_Z32 :=
  Int256Tree_based_hashmap_hash tint_Z32.
Definition thash_hash_int_HASH_address_HASH_address_Z32 := (Tpair HASH_address_HASH_address_Z32 (Thashmap tint (Thashmap tint tint))).
Global Instance thash_hash_int_HASH_address_HASH_address_Z32_hyper_type_impl : HyperTypeImpl thash_hash_int_HASH_address_HASH_address_Z32 :=
   Int256Tree_based_hashmap_hyper_type_impl thash_int_HASH_address_Z32.
Definition hash_hash_int_HASH_address_HASH_address_Z32_pair := mk_hyper_type_pair thash_hash_int_HASH_address_HASH_address_Z32.
Global Instance thash_hash_int_HASH_address_HASH_address_Z32_hyper_type : HyperType thash_hash_int_HASH_address_HASH_address_Z32 :=
  Int256Tree_based_hashmap_hyper_type thash_int_HASH_address_Z32.
Global Instance thash_hash_int_HASH_address_HASH_address_Z32_index_impl : HyperIntHashImpl thash_hash_int_HASH_address_HASH_address_Z32 thash_int_HASH_address_Z32 :=
  Int256Tree_based_hashmap_hash_impl thash_int_HASH_address_Z32.
Global Instance thash_hash_int_HASH_address_HASH_address_Z32_hash : HyperIntHash thash_hash_int_HASH_address_HASH_address_Z32 thash_int_HASH_address_Z32 :=
  Int256Tree_based_hashmap_hash thash_int_HASH_address_Z32.
Require Import backend.MachineModel.
Program Definition ext_call_me {adata: Type} (me : machine_env adata) (ext_contract : int256) := {|
  me_address := ext_contract;
  me_origin := me_origin me;
  me_caller := me_address me;
  me_callvalue := me_callvalue me; (* FIXME: the callvalue modeling is wrong *)
  me_coinbase := me_coinbase me;
  me_timestamp := me_timestamp me;
  me_number := me_number me;
  me_chainid := me_chainid me;
  me_balance := me_balance me;
  me_blockhash := me_blockhash me;
  me_transfer := me_transfer me;
  me_callmethod := me_callmethod me;
  me_log := me_log me;
|}.
Next Obligation.
destruct me; simpl. destruct me_valid as [[]]. auto.
Defined.
Record global_abstract_data_type : Type := {
  Outgoing_transfer_recipient_and_amount : option (int256 * Z);
  ERC20WrappedEth_wrapped : (Int256Tree.t Z32);
  ERC20WrappedEth_allowances : (Int256Tree.t (Int256Tree.t Z32));
  ERC20WrappedEth__totalSupply : Z32
}.


Definition update_Outgoing_transfer_recipient_and_amount new_outgoing_transfer_recipient_and_amount (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type new_outgoing_transfer_recipient_and_amount (ERC20WrappedEth_wrapped glabs_a) (ERC20WrappedEth_allowances glabs_a) (ERC20WrappedEth__totalSupply glabs_a) .
Definition update_ERC20WrappedEth_wrapped glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type  (Outgoing_transfer_recipient_and_amount glabs_a) glabs_b (ERC20WrappedEth_allowances glabs_a) (ERC20WrappedEth__totalSupply glabs_a) .
Definition update_ERC20WrappedEth_allowances glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type  (Outgoing_transfer_recipient_and_amount glabs_a) (ERC20WrappedEth_wrapped glabs_a) glabs_b (ERC20WrappedEth__totalSupply glabs_a) .
Definition update_ERC20WrappedEth__totalSupply glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type  (Outgoing_transfer_recipient_and_amount glabs_a) (ERC20WrappedEth_wrapped glabs_a) (ERC20WrappedEth_allowances glabs_a) glabs_b .

Definition init_global_abstract_data : global_abstract_data_type := {|
  Outgoing_transfer_recipient_and_amount := None;
  ERC20WrappedEth_wrapped := (Int256Tree.empty Z32);
  ERC20WrappedEth_allowances := (Int256Tree.empty (Int256Tree.t Z32));
  ERC20WrappedEth__totalSupply := 0
|}.

Definition block := positive.
Definition global_low_level_invariant (n : block)(abd : global_abstract_data_type) := True.
End EdsgerGen.

Lemma ERC20WrappedEth_wrapped_of_update_ERC20WrappedEth_wrapped : forall _x (glabs_a : global_abstract_data_type),
  ERC20WrappedEth_wrapped (update_ERC20WrappedEth_wrapped _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite ERC20WrappedEth_wrapped_of_update_ERC20WrappedEth_wrapped : updates.

Lemma ERC20WrappedEth_wrapped_of_update_ERC20WrappedEth_allowances : forall _x (glabs_a : global_abstract_data_type),
  ERC20WrappedEth_wrapped (update_ERC20WrappedEth_allowances _x glabs_a) = ERC20WrappedEth_wrapped glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite ERC20WrappedEth_wrapped_of_update_ERC20WrappedEth_allowances : updates.

Lemma ERC20WrappedEth_wrapped_of_update_ERC20WrappedEth__totalSupply : forall _x (glabs_a : global_abstract_data_type),
  ERC20WrappedEth_wrapped (update_ERC20WrappedEth__totalSupply _x glabs_a) = ERC20WrappedEth_wrapped glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite ERC20WrappedEth_wrapped_of_update_ERC20WrappedEth__totalSupply : updates.


Lemma ERC20WrappedEth_allowances_of_update_ERC20WrappedEth_wrapped : forall _x (glabs_a : global_abstract_data_type),
  ERC20WrappedEth_allowances (update_ERC20WrappedEth_wrapped _x glabs_a) = ERC20WrappedEth_allowances glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite ERC20WrappedEth_allowances_of_update_ERC20WrappedEth_wrapped : updates.

Lemma ERC20WrappedEth_allowances_of_update_ERC20WrappedEth_allowances : forall _x (glabs_a : global_abstract_data_type),
  ERC20WrappedEth_allowances (update_ERC20WrappedEth_allowances _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite ERC20WrappedEth_allowances_of_update_ERC20WrappedEth_allowances : updates.

Lemma ERC20WrappedEth_allowances_of_update_ERC20WrappedEth__totalSupply : forall _x (glabs_a : global_abstract_data_type),
  ERC20WrappedEth_allowances (update_ERC20WrappedEth__totalSupply _x glabs_a) = ERC20WrappedEth_allowances glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite ERC20WrappedEth_allowances_of_update_ERC20WrappedEth__totalSupply : updates.


Lemma ERC20WrappedEth__totalSupply_of_update_ERC20WrappedEth_wrapped : forall _x (glabs_a : global_abstract_data_type),
  ERC20WrappedEth__totalSupply (update_ERC20WrappedEth_wrapped _x glabs_a) = ERC20WrappedEth__totalSupply glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite ERC20WrappedEth__totalSupply_of_update_ERC20WrappedEth_wrapped : updates.

Lemma ERC20WrappedEth__totalSupply_of_update_ERC20WrappedEth_allowances : forall _x (glabs_a : global_abstract_data_type),
  ERC20WrappedEth__totalSupply (update_ERC20WrappedEth_allowances _x glabs_a) = ERC20WrappedEth__totalSupply glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite ERC20WrappedEth__totalSupply_of_update_ERC20WrappedEth_allowances : updates.

Lemma ERC20WrappedEth__totalSupply_of_update_ERC20WrappedEth__totalSupply : forall _x (glabs_a : global_abstract_data_type),
  ERC20WrappedEth__totalSupply (update_ERC20WrappedEth__totalSupply _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite ERC20WrappedEth__totalSupply_of_update_ERC20WrappedEth__totalSupply : updates.

Opaque ERC20WrappedEth_wrapped update_ERC20WrappedEth_wrapped ERC20WrappedEth_allowances update_ERC20WrappedEth_allowances ERC20WrappedEth__totalSupply update_ERC20WrappedEth__totalSupply.
