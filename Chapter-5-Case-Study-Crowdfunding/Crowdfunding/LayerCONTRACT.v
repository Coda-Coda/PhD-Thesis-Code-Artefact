(* WARNING: This file is generated by Edsger, the DeepSEA compiler.
            All modification will be lost when regenerating. *)
(* Module Crowdfunding.LayerCONTRACT for Crowdfunding.ds *)
Require Import BinPos.
Require Import DeepSpec.Runtime.
Require Import Crowdfunding.EdsgerIdents.
Require Import Crowdfunding.DataTypes.
Require Import Crowdfunding.DataTypeOps.
Require Import Crowdfunding.DataTypeProofs.
Require Import DeepSpec.lib.Monad.Monad.
Require Import DeepSpec.lib.Monad.MonadState.
Require Import DeepSpec.lib.Monad.StateMonad.
Require Import DeepSpec.lib.Monad.OptionMonad.
Require Import DeepSpec.lib.Monad.MonadZero.
Require Import DeepSpec.core.SynthesisStmt.
Require Import DeepSpec.core.SynthesisFunc.
Require Import backend.MachineModel.
Existing Instance MonadState_DS.
Existing Instance MonadZero_DS.

Section EdsgerGen.



Context {memModelOps : MemoryModelOps mem}.
Instance GlobalLayerSpec : LayerSpecClass := {
  memModelOps := memModelOps;
  GetHighData := global_abstract_data_type 
}.


Context`{global_abdata : !GlobalAbData init_global_abstract_data global_low_level_invariant}.
Definition CONTRACT_kernel_mode (abd : global_abstract_data_type) := True.
Global Arguments CONTRACT_kernel_mode / abd.

Class Layer_CONTRACT_Context_prf  := {
  (* ensuring global empty data matches those in the object definitions *)
  CONTRACT_init_Crowdfunding_owner_eq : Crowdfunding_owner init_global_abstract_data = (Int256.repr 890025619261977197475349953386626580431692757011);
  CONTRACT_init_Crowdfunding_max_block_eq : Crowdfunding_max_block init_global_abstract_data = (Int256.repr 140);
  CONTRACT_init_Crowdfunding_goal_eq : Crowdfunding_goal init_global_abstract_data = 50;
  CONTRACT_init_Crowdfunding_backers_eq : Crowdfunding_backers init_global_abstract_data = (Int256Tree.empty Z32);
  CONTRACT_init_Crowdfunding_funded_eq : Crowdfunding_funded init_global_abstract_data = false
}.
Context`{CTXT_prf : !Layer_CONTRACT_Context_prf}.

Instance CONTRACT_data_ops : CompatDataOps global_abstract_data_type := {
  empty_data := init_global_abstract_data;
  high_level_invariant d := True;
}.

Instance CONTRACT_data : CompatData global_abstract_data_type := {
empty_data_high_level_invariant := I
}.

Instance CONTRACT_overlay_spec : OverlaySpecClass := {
}.



Instance CONTRACT_underlay_spec : UnderlaySpecClass := {
  cdataOpsLow := @BuiltinBase_data_ops GlobalLayerSpec init_global_abstract_data;
  cdataLow := BuiltinBase_data;
}.


Section OBJECT_Crowdfunding_DEFINITION.
  Context`{HM : !HyperMem}.

  (* Object variables *)
  Definition Crowdfunding_owner_var := {|
    ltype_tp_marker := tint_U;

    ltype_ident := HighValues.Field HighValues.Global var_Crowdfunding_Crowdfunding_owner_ident;
    ltype_ghost := false;

    ltype_get := Crowdfunding_owner;
    ltype_set := update_Crowdfunding_owner;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.
  Definition Crowdfunding_max_block_var := {|
    ltype_tp_marker := tint_U;

    ltype_ident := HighValues.Field HighValues.Global var_Crowdfunding_Crowdfunding_max_block_ident;
    ltype_ghost := false;

    ltype_get := Crowdfunding_max_block;
    ltype_set := update_Crowdfunding_max_block;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.
  Definition Crowdfunding_goal_var := {|
    ltype_tp_marker := tint_Z32;

    ltype_ident := HighValues.Field HighValues.Global var_Crowdfunding_Crowdfunding_goal_ident;
    ltype_ghost := false;

    ltype_get := Crowdfunding_goal;
    ltype_set := update_Crowdfunding_goal;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.
  Definition Crowdfunding_backers_var := {|
    ltype_tp_marker := thash_int_HASH_address_Z32;

    ltype_ident := HighValues.Field HighValues.Global var_Crowdfunding_Crowdfunding_backers_ident;
    ltype_ghost := false;

    ltype_get := Crowdfunding_backers;
    ltype_set := update_Crowdfunding_backers;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.
  Definition Crowdfunding_funded_var := {|
    ltype_tp_marker := tint_bool;

    ltype_ident := HighValues.Field HighValues.Global var_Crowdfunding_Crowdfunding_funded_ident;
    ltype_ghost := false;

    ltype_get := Crowdfunding_funded;
    ltype_set := update_Crowdfunding_funded;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.

  Definition Crowdfunding_constructor := {|
    FC_ident_start := BuiltinBase_local_ident_start;
    FC_params := nil;
    FC_returns := void_unit_pair;
    FC_body := (CCsequence
      (CCsequence
        (CCstore
          (LCvar Crowdfunding_owner_var)
          (ECconst_int256 tint_U (Int256.repr 890025619261977197475349953386626580431692757011) (Int256.repr 890025619261977197475349953386626580431692757011)))
        (CCsequence
          (CCstore
            (LCvar Crowdfunding_max_block_var)
            (ECconst_int256 tint_U (Int256.repr 140) (Int256.repr 140)))
          (CCsequence
            (CCstore
              (LCvar Crowdfunding_goal_var)
              (ECconst_int256 tint_Z32 50 (Int256.repr 50)))
            (CCsequence
              CCskip
              (CCsequence
                (CCstore
                  (LCvar Crowdfunding_funded_var)
                  (ECconst_int256 tint_bool false Int256.zero))
                CCskip)))))
      CCskip)
  |}.
  Lemma Crowdfunding_constructor_wf
      : synth_func_wellformed Crowdfunding_constructor.
  Proof. solve_wellformed. Defined.
  Definition Crowdfunding_constructor_opt : machine_env GetHighData -> DS unit  := 
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Crowdfunding_owner update_Crowdfunding_owner Crowdfunding_max_block update_Crowdfunding_max_block Crowdfunding_goal update_Crowdfunding_goal Crowdfunding_backers update_Crowdfunding_backers Crowdfunding_funded update_Crowdfunding_funded]
  in synth_func_spec_opt Crowdfunding_constructor Crowdfunding_constructor_wf.
  Definition Crowdfunding_constructor_spec_hlist_opt args :=
    @apply_param_func Crowdfunding_constructor.(FC_params) _
                      (Crowdfunding_constructor_opt) args.

(* CEI stands for Checks Effects Interactions (pattern) and the definitions below are used
    to keep track of the safe situations in which a primitive can be called. See also
    CEIP_prf in Syntax.v and for the tactic definitions see Runtime.v *)
    
Lemma Crowdfunding_constructor_follows_CEIP : { rsts | CEIP_function_prf (fst rsts) Crowdfunding_constructor (snd rsts)}.
Proof.
  unfold Crowdfunding_constructor.
  verify_checks_effects_interactions_pattern. (* If this tactic fails then it indicates that a strict version of the Checks-Effects-Interactions pattern was not followed in the function: Crowdfunding_constructor. *)
Defined.

Definition Crowdfunding_constructor_CEIP_color_before := fst (proj1_sig Crowdfunding_constructor_follows_CEIP).
Definition Crowdfunding_constructor_CEIP_color_after := snd (proj1_sig Crowdfunding_constructor_follows_CEIP).

  Definition Crowdfunding_constructor_prim := {|
    PRIMident := ident_Crowdfunding_constructor;
    (* PRIMcc := AST.cc_default; *)
    PRIMghost := false;
    PRIMpure := false;
    PRIMargt_marker := Crowdfunding_constructor.(FC_params);
    PRIMret_marker := Crowdfunding_constructor.(FC_returns);
    PRIMceip_color_before := Crowdfunding_constructor_CEIP_color_before;
    PRIMceip_color_after := Crowdfunding_constructor_CEIP_color_after;
    PRIMcond := fun _ _ _ => True;
    (* PRIMsem := Crowdfunding_constructor_spec_hlist; *)
    PRIMsem_opt := Crowdfunding_constructor_spec_hlist_opt
  |}.

  Lemma Crowdfunding_constructor_spec_hlist_opt_eq :
    Crowdfunding_constructor_spec_hlist_opt =
    fun args => apply_param_func
      (synth_func_spec_opt Crowdfunding_constructor Crowdfunding_constructor_wf)
      args.
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Crowdfunding_owner update_Crowdfunding_owner Crowdfunding_max_block update_Crowdfunding_max_block Crowdfunding_goal update_Crowdfunding_goal Crowdfunding_backers update_Crowdfunding_backers Crowdfunding_funded update_Crowdfunding_funded]. 
     reflexivity.
  Qed.
  Definition Crowdfunding_constructor_cfun :=
  Eval cbv in synth_func_func Crowdfunding_constructor.

  Definition Crowdfunding_constructor_cond  me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Crowdfunding_owner update_Crowdfunding_owner Crowdfunding_max_block update_Crowdfunding_max_block Crowdfunding_goal update_Crowdfunding_goal Crowdfunding_backers update_Crowdfunding_backers Crowdfunding_funded update_Crowdfunding_funded]
    in
    high_level_invariant d ->
    synth_func_cond Crowdfunding_constructor Crowdfunding_constructor_wf
								      me d.
  
  Lemma Crowdfunding_constructor_cond_eq : forall  me d, 
    Crowdfunding_constructor_cond  me d ->
    high_level_invariant d ->
    synth_func_cond Crowdfunding_constructor Crowdfunding_constructor_wf  me d.
    Proof.
      intros  me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Crowdfunding_owner update_Crowdfunding_owner Crowdfunding_max_block update_Crowdfunding_max_block Crowdfunding_goal update_Crowdfunding_goal Crowdfunding_backers update_Crowdfunding_backers Crowdfunding_funded update_Crowdfunding_funded].
       exact H_cond.
    Qed.

  Definition Crowdfunding_constructor_obligation  me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Crowdfunding_owner update_Crowdfunding_owner Crowdfunding_max_block update_Crowdfunding_max_block Crowdfunding_goal update_Crowdfunding_goal Crowdfunding_backers update_Crowdfunding_backers Crowdfunding_funded update_Crowdfunding_funded]
    in
    high_level_invariant d ->
    synth_func_obligation Crowdfunding_constructor Crowdfunding_constructor_wf
								      me d.
  
  Lemma Crowdfunding_constructor_obligation_eq : forall  me d, 
    Crowdfunding_constructor_obligation  me d ->
    high_level_invariant d ->
    synth_func_obligation Crowdfunding_constructor Crowdfunding_constructor_wf  me d.
    Proof.
      intros  me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Crowdfunding_owner update_Crowdfunding_owner Crowdfunding_max_block update_Crowdfunding_max_block Crowdfunding_goal update_Crowdfunding_goal Crowdfunding_backers update_Crowdfunding_backers Crowdfunding_funded update_Crowdfunding_funded].
       exact H_cond.
    Qed.

  Definition Crowdfunding_constructor_spec :=
  Eval cbv [sf_mem sf_return fst snd Crowdfunding_constructor_opt] in
    fun  me => execStateT (Crowdfunding_constructor_opt me).
  Lemma Crowdfunding_constructor_spec_eq :
    Crowdfunding_constructor_spec =
    fun  me => execStateT (synth_func_spec_opt Crowdfunding_constructor Crowdfunding_constructor_wf me).
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

          Crowdfunding_owner update_Crowdfunding_owner Crowdfunding_max_block update_Crowdfunding_max_block Crowdfunding_goal update_Crowdfunding_goal Crowdfunding_backers update_Crowdfunding_backers Crowdfunding_funded update_Crowdfunding_funded].
    reflexivity.
  Qed.

Global Opaque Crowdfunding_constructor_opt.

  Definition Crowdfunding_donate := {|
    FC_ident_start := BuiltinBase_local_ident_start;
    FC_params := nil;
    FC_returns := void_unit_pair;
    FC_body := (CCsequence
      (CCassert (CCyield (ECbinop tint_bool One
        (@ECbuiltin0 _ _  _ builtin0_caller_impl)
        (@ECbuiltin0 _ _  _ builtin0_address_impl))))
      (CCsequence
        (CCassert (CCyield (ECbinop tint_bool Oge
          (@ECbuiltin0 _ _  _ builtin0_callvalue_impl)
          (ECconst_int256 tint_Z32 0 (Int256.repr 0)))))
        (CClet (* bs := *) 14%positive
          (CCload (LCvar Crowdfunding_backers_var))
          (CClet (* blk := *) 15%positive
            (CCyield (@ECbuiltin0 _ _  _ builtin0_number_impl))
            (CClet (* _max_block := *) 16%positive
              (CCload (LCvar Crowdfunding_max_block_var))
              (CCifthenelse (ECbinop tint_bool Ogt
                  (ECtempvar tint_U 15%positive (* blk *))
                  (ECtempvar tint_U 16%positive (* _max_block *)))
                (CCsequence
                  CCskip
                  (CCassert (CCyield (ECconst_int256 tint_bool false Int256.zero))))
                (CClet (* backed_amount := *) 18%positive
                  (CCload (LChash tint_Z32
                    (LCvar Crowdfunding_backers_var)
                    (@ECbuiltin0 _ _  _ builtin0_caller_impl)))
                  (CCifthenelse (ECbinop tint_bool Oeq
                      (ECtempvar tint_Z32 18%positive (* backed_amount *))
                      (ECconst_int256 tint_Z32 0 (Int256.repr 0)))
                    (CCstore
                      (LChash tint_Z32
                        (LCvar Crowdfunding_backers_var)
                        (@ECbuiltin0 _ _  _ builtin0_caller_impl))
                      (@ECbuiltin0 _ _  _ builtin0_callvalue_impl))
                    (CCsequence
                      CCskip
                      (CCassert (CCyield (ECconst_int256 tint_bool false Int256.zero))))))))))))
  |}.
  Lemma Crowdfunding_donate_wf
      : synth_func_wellformed Crowdfunding_donate.
  Proof. solve_wellformed. Defined.
  Definition Crowdfunding_donate_opt : machine_env GetHighData -> DS unit  := 
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Crowdfunding_owner update_Crowdfunding_owner Crowdfunding_max_block update_Crowdfunding_max_block Crowdfunding_goal update_Crowdfunding_goal Crowdfunding_backers update_Crowdfunding_backers Crowdfunding_funded update_Crowdfunding_funded]
  in synth_func_spec_opt Crowdfunding_donate Crowdfunding_donate_wf.
  Definition Crowdfunding_donate_spec_hlist_opt args :=
    @apply_param_func Crowdfunding_donate.(FC_params) _
                      (Crowdfunding_donate_opt) args.

(* CEI stands for Checks Effects Interactions (pattern) and the definitions below are used
    to keep track of the safe situations in which a primitive can be called. See also
    CEIP_prf in Syntax.v and for the tactic definitions see Runtime.v *)
    
Lemma Crowdfunding_donate_follows_CEIP : { rsts | CEIP_function_prf (fst rsts) Crowdfunding_donate (snd rsts)}.
Proof.
  unfold Crowdfunding_donate.
  verify_checks_effects_interactions_pattern. (* If this tactic fails then it indicates that a strict version of the Checks-Effects-Interactions pattern was not followed in the function: Crowdfunding_donate. *)
Defined.

Definition Crowdfunding_donate_CEIP_color_before := fst (proj1_sig Crowdfunding_donate_follows_CEIP).
Definition Crowdfunding_donate_CEIP_color_after := snd (proj1_sig Crowdfunding_donate_follows_CEIP).

  Definition Crowdfunding_donate_prim := {|
    PRIMident := ident_Crowdfunding_donate;
    (* PRIMcc := AST.cc_default; *)
    PRIMghost := false;
    PRIMpure := false;
    PRIMargt_marker := Crowdfunding_donate.(FC_params);
    PRIMret_marker := Crowdfunding_donate.(FC_returns);
    PRIMceip_color_before := Crowdfunding_donate_CEIP_color_before;
    PRIMceip_color_after := Crowdfunding_donate_CEIP_color_after;
    PRIMcond := fun _ _ _ => True;
    (* PRIMsem := Crowdfunding_donate_spec_hlist; *)
    PRIMsem_opt := Crowdfunding_donate_spec_hlist_opt
  |}.

  Lemma Crowdfunding_donate_spec_hlist_opt_eq :
    Crowdfunding_donate_spec_hlist_opt =
    fun args => apply_param_func
      (synth_func_spec_opt Crowdfunding_donate Crowdfunding_donate_wf)
      args.
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Crowdfunding_owner update_Crowdfunding_owner Crowdfunding_max_block update_Crowdfunding_max_block Crowdfunding_goal update_Crowdfunding_goal Crowdfunding_backers update_Crowdfunding_backers Crowdfunding_funded update_Crowdfunding_funded]. 
     reflexivity.
  Qed.
  Definition Crowdfunding_donate_cfun :=
  Eval cbv in synth_func_func Crowdfunding_donate.

  Definition Crowdfunding_donate_cond  me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Crowdfunding_owner update_Crowdfunding_owner Crowdfunding_max_block update_Crowdfunding_max_block Crowdfunding_goal update_Crowdfunding_goal Crowdfunding_backers update_Crowdfunding_backers Crowdfunding_funded update_Crowdfunding_funded]
    in
    high_level_invariant d ->
    synth_func_cond Crowdfunding_donate Crowdfunding_donate_wf
								      me d.
  
  Lemma Crowdfunding_donate_cond_eq : forall  me d, 
    Crowdfunding_donate_cond  me d ->
    high_level_invariant d ->
    synth_func_cond Crowdfunding_donate Crowdfunding_donate_wf  me d.
    Proof.
      intros  me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Crowdfunding_owner update_Crowdfunding_owner Crowdfunding_max_block update_Crowdfunding_max_block Crowdfunding_goal update_Crowdfunding_goal Crowdfunding_backers update_Crowdfunding_backers Crowdfunding_funded update_Crowdfunding_funded].
       exact H_cond.
    Qed.

  Definition Crowdfunding_donate_obligation  me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Crowdfunding_owner update_Crowdfunding_owner Crowdfunding_max_block update_Crowdfunding_max_block Crowdfunding_goal update_Crowdfunding_goal Crowdfunding_backers update_Crowdfunding_backers Crowdfunding_funded update_Crowdfunding_funded]
    in
    high_level_invariant d ->
    synth_func_obligation Crowdfunding_donate Crowdfunding_donate_wf
								      me d.
  
  Lemma Crowdfunding_donate_obligation_eq : forall  me d, 
    Crowdfunding_donate_obligation  me d ->
    high_level_invariant d ->
    synth_func_obligation Crowdfunding_donate Crowdfunding_donate_wf  me d.
    Proof.
      intros  me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Crowdfunding_owner update_Crowdfunding_owner Crowdfunding_max_block update_Crowdfunding_max_block Crowdfunding_goal update_Crowdfunding_goal Crowdfunding_backers update_Crowdfunding_backers Crowdfunding_funded update_Crowdfunding_funded].
       exact H_cond.
    Qed.

  Definition Crowdfunding_donate_spec :=
  Eval cbv [sf_mem sf_return fst snd Crowdfunding_donate_opt] in
    fun  me => execStateT (Crowdfunding_donate_opt me).
  Lemma Crowdfunding_donate_spec_eq :
    Crowdfunding_donate_spec =
    fun  me => execStateT (synth_func_spec_opt Crowdfunding_donate Crowdfunding_donate_wf me).
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

          Crowdfunding_owner update_Crowdfunding_owner Crowdfunding_max_block update_Crowdfunding_max_block Crowdfunding_goal update_Crowdfunding_goal Crowdfunding_backers update_Crowdfunding_backers Crowdfunding_funded update_Crowdfunding_funded].
    reflexivity.
  Qed.

Global Opaque Crowdfunding_donate_opt.

  Definition Crowdfunding_getFunds := {|
    FC_ident_start := BuiltinBase_local_ident_start;
    FC_params := nil;
    FC_returns := void_unit_pair;
    FC_body := (CCsequence
      (CCassert (CCyield (ECbinop tint_bool One
        (@ECbuiltin0 _ _  _ builtin0_caller_impl)
        (@ECbuiltin0 _ _  _ builtin0_address_impl))))
      (CCsequence
        (CCassert (CCyield (ECbinop tint_bool Oeq
          (@ECbuiltin0 _ _  _ builtin0_callvalue_impl)
          (ECconst_int256 tint_Z32 0 (Int256.repr 0)))))
        (CClet (* _owner := *) 14%positive
          (CCload (LCvar Crowdfunding_owner_var))
          (CCifthenelse (ECbinop tint_bool Oeq
              (@ECbuiltin0 _ _  _ builtin0_caller_impl)
              (ECtempvar tint_U 14%positive (* _owner *)))
            (CClet (* blk := *) 15%positive
              (CCyield (@ECbuiltin0 _ _  _ builtin0_number_impl))
              (CClet (* bal := *) 16%positive
                (CCyield (@ECbuiltin1 _ _ _ _ _ builtin1_balance_impl 
(@ECbuiltin0 _ _  _ builtin0_address_impl)))
                (CClet (* _max_block := *) 17%positive
                  (CCload (LCvar Crowdfunding_max_block_var))
                  (CCifthenelse (ECbinop tint_bool Ogt
                      (ECtempvar tint_U 15%positive (* blk *))
                      (ECtempvar tint_U 17%positive (* _max_block *)))
                    (CClet (* _goal := *) 18%positive
                      (CCload (LCvar Crowdfunding_goal_var))
                      (CCifthenelse (ECbinop tint_bool Ole
                          (ECtempvar tint_Z32 18%positive (* _goal *))
                          (ECtempvar tint_Z32 16%positive (* bal *)))
                        (CCsequence
                          (CCstore
                            (LCvar Crowdfunding_funded_var)
                            (ECconst_int256 tint_bool true Int256.one))
                          (CCsequence
                            CCskip
                            (CCtransfer (ECtempvar tint_U 14%positive (* _owner *))(ECtempvar tint_Z32 16%positive (* bal *)))))
                        CCskip))
                    CCskip))))
            CCskip))))
  |}.
  Lemma Crowdfunding_getFunds_wf
      : synth_func_wellformed Crowdfunding_getFunds.
  Proof. solve_wellformed. Defined.
  Definition Crowdfunding_getFunds_opt : machine_env GetHighData -> DS unit  := 
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Crowdfunding_owner update_Crowdfunding_owner Crowdfunding_max_block update_Crowdfunding_max_block Crowdfunding_goal update_Crowdfunding_goal Crowdfunding_backers update_Crowdfunding_backers Crowdfunding_funded update_Crowdfunding_funded]
  in synth_func_spec_opt Crowdfunding_getFunds Crowdfunding_getFunds_wf.
  Definition Crowdfunding_getFunds_spec_hlist_opt args :=
    @apply_param_func Crowdfunding_getFunds.(FC_params) _
                      (Crowdfunding_getFunds_opt) args.

(* CEI stands for Checks Effects Interactions (pattern) and the definitions below are used
    to keep track of the safe situations in which a primitive can be called. See also
    CEIP_prf in Syntax.v and for the tactic definitions see Runtime.v *)
    
Lemma Crowdfunding_getFunds_follows_CEIP : { rsts | CEIP_function_prf (fst rsts) Crowdfunding_getFunds (snd rsts)}.
Proof.
  unfold Crowdfunding_getFunds.
  verify_checks_effects_interactions_pattern. (* If this tactic fails then it indicates that a strict version of the Checks-Effects-Interactions pattern was not followed in the function: Crowdfunding_getFunds. *)
Defined.

Definition Crowdfunding_getFunds_CEIP_color_before := fst (proj1_sig Crowdfunding_getFunds_follows_CEIP).
Definition Crowdfunding_getFunds_CEIP_color_after := snd (proj1_sig Crowdfunding_getFunds_follows_CEIP).

  Definition Crowdfunding_getFunds_prim := {|
    PRIMident := ident_Crowdfunding_getFunds;
    (* PRIMcc := AST.cc_default; *)
    PRIMghost := false;
    PRIMpure := false;
    PRIMargt_marker := Crowdfunding_getFunds.(FC_params);
    PRIMret_marker := Crowdfunding_getFunds.(FC_returns);
    PRIMceip_color_before := Crowdfunding_getFunds_CEIP_color_before;
    PRIMceip_color_after := Crowdfunding_getFunds_CEIP_color_after;
    PRIMcond := fun _ _ _ => True;
    (* PRIMsem := Crowdfunding_getFunds_spec_hlist; *)
    PRIMsem_opt := Crowdfunding_getFunds_spec_hlist_opt
  |}.

  Lemma Crowdfunding_getFunds_spec_hlist_opt_eq :
    Crowdfunding_getFunds_spec_hlist_opt =
    fun args => apply_param_func
      (synth_func_spec_opt Crowdfunding_getFunds Crowdfunding_getFunds_wf)
      args.
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Crowdfunding_owner update_Crowdfunding_owner Crowdfunding_max_block update_Crowdfunding_max_block Crowdfunding_goal update_Crowdfunding_goal Crowdfunding_backers update_Crowdfunding_backers Crowdfunding_funded update_Crowdfunding_funded]. 
     reflexivity.
  Qed.
  Definition Crowdfunding_getFunds_cfun :=
  Eval cbv in synth_func_func Crowdfunding_getFunds.

  Definition Crowdfunding_getFunds_cond  me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Crowdfunding_owner update_Crowdfunding_owner Crowdfunding_max_block update_Crowdfunding_max_block Crowdfunding_goal update_Crowdfunding_goal Crowdfunding_backers update_Crowdfunding_backers Crowdfunding_funded update_Crowdfunding_funded]
    in
    high_level_invariant d ->
    synth_func_cond Crowdfunding_getFunds Crowdfunding_getFunds_wf
								      me d.
  
  Lemma Crowdfunding_getFunds_cond_eq : forall  me d, 
    Crowdfunding_getFunds_cond  me d ->
    high_level_invariant d ->
    synth_func_cond Crowdfunding_getFunds Crowdfunding_getFunds_wf  me d.
    Proof.
      intros  me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Crowdfunding_owner update_Crowdfunding_owner Crowdfunding_max_block update_Crowdfunding_max_block Crowdfunding_goal update_Crowdfunding_goal Crowdfunding_backers update_Crowdfunding_backers Crowdfunding_funded update_Crowdfunding_funded].
       exact H_cond.
    Qed.

  Definition Crowdfunding_getFunds_obligation  me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Crowdfunding_owner update_Crowdfunding_owner Crowdfunding_max_block update_Crowdfunding_max_block Crowdfunding_goal update_Crowdfunding_goal Crowdfunding_backers update_Crowdfunding_backers Crowdfunding_funded update_Crowdfunding_funded]
    in
    high_level_invariant d ->
    synth_func_obligation Crowdfunding_getFunds Crowdfunding_getFunds_wf
								      me d.
  
  Lemma Crowdfunding_getFunds_obligation_eq : forall  me d, 
    Crowdfunding_getFunds_obligation  me d ->
    high_level_invariant d ->
    synth_func_obligation Crowdfunding_getFunds Crowdfunding_getFunds_wf  me d.
    Proof.
      intros  me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Crowdfunding_owner update_Crowdfunding_owner Crowdfunding_max_block update_Crowdfunding_max_block Crowdfunding_goal update_Crowdfunding_goal Crowdfunding_backers update_Crowdfunding_backers Crowdfunding_funded update_Crowdfunding_funded].
       exact H_cond.
    Qed.

  Definition Crowdfunding_getFunds_spec :=
  Eval cbv [sf_mem sf_return fst snd Crowdfunding_getFunds_opt] in
    fun  me => execStateT (Crowdfunding_getFunds_opt me).
  Lemma Crowdfunding_getFunds_spec_eq :
    Crowdfunding_getFunds_spec =
    fun  me => execStateT (synth_func_spec_opt Crowdfunding_getFunds Crowdfunding_getFunds_wf me).
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

          Crowdfunding_owner update_Crowdfunding_owner Crowdfunding_max_block update_Crowdfunding_max_block Crowdfunding_goal update_Crowdfunding_goal Crowdfunding_backers update_Crowdfunding_backers Crowdfunding_funded update_Crowdfunding_funded].
    reflexivity.
  Qed.

Global Opaque Crowdfunding_getFunds_opt.

  Definition Crowdfunding_claim := {|
    FC_ident_start := BuiltinBase_local_ident_start;
    FC_params := nil;
    FC_returns := void_unit_pair;
    FC_body := (CCsequence
      (CCassert (CCyield (ECbinop tint_bool One
        (@ECbuiltin0 _ _  _ builtin0_caller_impl)
        (@ECbuiltin0 _ _  _ builtin0_address_impl))))
      (CCsequence
        (CCassert (CCyield (ECbinop tint_bool Oeq
          (@ECbuiltin0 _ _  _ builtin0_callvalue_impl)
          (ECconst_int256 tint_Z32 0 (Int256.repr 0)))))
        (CClet (* blk := *) 14%positive
          (CCyield (@ECbuiltin0 _ _  _ builtin0_number_impl))
          (CClet (* _max_block := *) 15%positive
            (CCload (LCvar Crowdfunding_max_block_var))
            (CCifthenelse (ECbinop tint_bool Ole
                (ECtempvar tint_U 14%positive (* blk *))
                (ECtempvar tint_U 15%positive (* _max_block *)))
              CCskip
              (CClet (* bal := *) 16%positive
                (CCyield (@ECbuiltin1 _ _ _ _ _ builtin1_balance_impl 
(@ECbuiltin0 _ _  _ builtin0_address_impl)))
                (CClet (* backed_amount := *) 17%positive
                  (CCload (LChash tint_Z32
                    (LCvar Crowdfunding_backers_var)
                    (@ECbuiltin0 _ _  _ builtin0_caller_impl)))
                  (CClet (* _funded := *) 18%positive
                    (CCload (LCvar Crowdfunding_funded_var))
                    (CClet (* _goal := *) 19%positive
                      (CCload (LCvar Crowdfunding_goal_var))
                      (CCifthenelse (ECbinop tint_bool Oor
                          (ECbinop tint_bool Oeq
                            (ECtempvar tint_Z32 17%positive (* backed_amount *))
                            (ECconst_int256 tint_Z32 0 (Int256.repr 0)))
                          (ECbinop tint_bool Oor
                            (ECtempvar tint_bool 18%positive (* _funded *))
                            (ECbinop tint_bool Ole
                              (ECtempvar tint_Z32 19%positive (* _goal *))
                              (ECtempvar tint_Z32 16%positive (* bal *)))))
                        CCskip
                        (CCsequence
                          (CCstore
                            (LChash tint_Z32
                              (LCvar Crowdfunding_backers_var)
                              (@ECbuiltin0 _ _  _ builtin0_caller_impl))
                            (ECconst_int256 tint_Z32 0 (Int256.repr 0)))
                          (CCsequence
                            CCskip
                            (CCtransfer (@ECbuiltin0 _ _  _ builtin0_caller_impl)(ECtempvar tint_Z32 17%positive (* backed_amount *)))))))))))))))
  |}.
  Lemma Crowdfunding_claim_wf
      : synth_func_wellformed Crowdfunding_claim.
  Proof. solve_wellformed. Defined.
  Definition Crowdfunding_claim_opt : machine_env GetHighData -> DS unit  := 
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Crowdfunding_owner update_Crowdfunding_owner Crowdfunding_max_block update_Crowdfunding_max_block Crowdfunding_goal update_Crowdfunding_goal Crowdfunding_backers update_Crowdfunding_backers Crowdfunding_funded update_Crowdfunding_funded]
  in synth_func_spec_opt Crowdfunding_claim Crowdfunding_claim_wf.
  Definition Crowdfunding_claim_spec_hlist_opt args :=
    @apply_param_func Crowdfunding_claim.(FC_params) _
                      (Crowdfunding_claim_opt) args.

(* CEI stands for Checks Effects Interactions (pattern) and the definitions below are used
    to keep track of the safe situations in which a primitive can be called. See also
    CEIP_prf in Syntax.v and for the tactic definitions see Runtime.v *)
    
Lemma Crowdfunding_claim_follows_CEIP : { rsts | CEIP_function_prf (fst rsts) Crowdfunding_claim (snd rsts)}.
Proof.
  unfold Crowdfunding_claim.
  verify_checks_effects_interactions_pattern. (* If this tactic fails then it indicates that a strict version of the Checks-Effects-Interactions pattern was not followed in the function: Crowdfunding_claim. *)
Defined.

Definition Crowdfunding_claim_CEIP_color_before := fst (proj1_sig Crowdfunding_claim_follows_CEIP).
Definition Crowdfunding_claim_CEIP_color_after := snd (proj1_sig Crowdfunding_claim_follows_CEIP).

  Definition Crowdfunding_claim_prim := {|
    PRIMident := ident_Crowdfunding_claim;
    (* PRIMcc := AST.cc_default; *)
    PRIMghost := false;
    PRIMpure := false;
    PRIMargt_marker := Crowdfunding_claim.(FC_params);
    PRIMret_marker := Crowdfunding_claim.(FC_returns);
    PRIMceip_color_before := Crowdfunding_claim_CEIP_color_before;
    PRIMceip_color_after := Crowdfunding_claim_CEIP_color_after;
    PRIMcond := fun _ _ _ => True;
    (* PRIMsem := Crowdfunding_claim_spec_hlist; *)
    PRIMsem_opt := Crowdfunding_claim_spec_hlist_opt
  |}.

  Lemma Crowdfunding_claim_spec_hlist_opt_eq :
    Crowdfunding_claim_spec_hlist_opt =
    fun args => apply_param_func
      (synth_func_spec_opt Crowdfunding_claim Crowdfunding_claim_wf)
      args.
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Crowdfunding_owner update_Crowdfunding_owner Crowdfunding_max_block update_Crowdfunding_max_block Crowdfunding_goal update_Crowdfunding_goal Crowdfunding_backers update_Crowdfunding_backers Crowdfunding_funded update_Crowdfunding_funded]. 
     reflexivity.
  Qed.
  Definition Crowdfunding_claim_cfun :=
  Eval cbv in synth_func_func Crowdfunding_claim.

  Definition Crowdfunding_claim_cond  me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Crowdfunding_owner update_Crowdfunding_owner Crowdfunding_max_block update_Crowdfunding_max_block Crowdfunding_goal update_Crowdfunding_goal Crowdfunding_backers update_Crowdfunding_backers Crowdfunding_funded update_Crowdfunding_funded]
    in
    high_level_invariant d ->
    synth_func_cond Crowdfunding_claim Crowdfunding_claim_wf
								      me d.
  
  Lemma Crowdfunding_claim_cond_eq : forall  me d, 
    Crowdfunding_claim_cond  me d ->
    high_level_invariant d ->
    synth_func_cond Crowdfunding_claim Crowdfunding_claim_wf  me d.
    Proof.
      intros  me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Crowdfunding_owner update_Crowdfunding_owner Crowdfunding_max_block update_Crowdfunding_max_block Crowdfunding_goal update_Crowdfunding_goal Crowdfunding_backers update_Crowdfunding_backers Crowdfunding_funded update_Crowdfunding_funded].
       exact H_cond.
    Qed.

  Definition Crowdfunding_claim_obligation  me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Crowdfunding_owner update_Crowdfunding_owner Crowdfunding_max_block update_Crowdfunding_max_block Crowdfunding_goal update_Crowdfunding_goal Crowdfunding_backers update_Crowdfunding_backers Crowdfunding_funded update_Crowdfunding_funded]
    in
    high_level_invariant d ->
    synth_func_obligation Crowdfunding_claim Crowdfunding_claim_wf
								      me d.
  
  Lemma Crowdfunding_claim_obligation_eq : forall  me d, 
    Crowdfunding_claim_obligation  me d ->
    high_level_invariant d ->
    synth_func_obligation Crowdfunding_claim Crowdfunding_claim_wf  me d.
    Proof.
      intros  me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Crowdfunding_owner update_Crowdfunding_owner Crowdfunding_max_block update_Crowdfunding_max_block Crowdfunding_goal update_Crowdfunding_goal Crowdfunding_backers update_Crowdfunding_backers Crowdfunding_funded update_Crowdfunding_funded].
       exact H_cond.
    Qed.

  Definition Crowdfunding_claim_spec :=
  Eval cbv [sf_mem sf_return fst snd Crowdfunding_claim_opt] in
    fun  me => execStateT (Crowdfunding_claim_opt me).
  Lemma Crowdfunding_claim_spec_eq :
    Crowdfunding_claim_spec =
    fun  me => execStateT (synth_func_spec_opt Crowdfunding_claim Crowdfunding_claim_wf me).
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

          Crowdfunding_owner update_Crowdfunding_owner Crowdfunding_max_block update_Crowdfunding_max_block Crowdfunding_goal update_Crowdfunding_goal Crowdfunding_backers update_Crowdfunding_backers Crowdfunding_funded update_Crowdfunding_funded].
    reflexivity.
  Qed.

Global Opaque Crowdfunding_claim_opt.
End OBJECT_Crowdfunding_DEFINITION.

End EdsgerGen.
