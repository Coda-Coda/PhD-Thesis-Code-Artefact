(* WARNING: This file is generated by Edsger, the DeepSEA compiler.
            All modification will be lost when regenerating. *)
(* Module Crowdfunding.DataTypeOps for Crowdfunding.ds *)
Require Import BinPos.
Require Import DeepSpec.Runtime.
Require Import Crowdfunding.EdsgerIdents.
Require Import Crowdfunding.DataTypes.

Section EdsgerGen.

Definition thash_int_HASH_address_Z32 := (Tpair HASH_address_Z32 (Thashmap tint tint)).
Global Instance thash_int_HASH_address_Z32_hyper_type_impl : HyperTypeImpl thash_int_HASH_address_Z32 :=
   Int256Tree_based_hashmap_hyper_type_impl tint_Z32.
Definition hash_int_HASH_address_Z32_pair := mk_hyper_type_pair thash_int_HASH_address_Z32.
Global Instance thash_int_HASH_address_Z32_hyper_type : HyperType thash_int_HASH_address_Z32 :=
  Int256Tree_based_hashmap_hyper_type tint_Z32.
Global Instance thash_int_HASH_address_Z32_index_impl : HyperIntHashImpl thash_int_HASH_address_Z32 tint_Z32 :=
  Int256Tree_based_hashmap_hash_impl tint_Z32.
Global Instance thash_int_HASH_address_Z32_hash : HyperIntHash thash_int_HASH_address_Z32 tint_Z32 :=
  Int256Tree_based_hashmap_hash tint_Z32.
Require Import backend.MachineModel.
Program Definition ext_call_me {adata: Type} (me : machine_env adata) (ext_contract : int256) := {|
  me_address := ext_contract;
  me_origin := me_origin me;
  me_caller := me_address me;
  me_callvalue := me_callvalue me; (* FIXME: the callvalue modeling is wrong *)
  me_coinbase := me_coinbase me;
  me_timestamp := me_timestamp me;
  me_number := me_number me;
  me_chainid := me_chainid me;
  me_balance := me_balance me;
  me_blockhash := me_blockhash me;
  me_transfer := me_transfer me;
  me_callmethod := me_callmethod me;
  me_log := me_log me;
|}.
Next Obligation.
destruct me; simpl. destruct me_valid as [[]]. auto.
Defined.
Record global_abstract_data_type : Type := {
  Outgoing_transfer_recipient_and_amount : option (int256 * Z);
  Crowdfunding_owner : int256;
  Crowdfunding_max_block : int256;
  Crowdfunding_goal : Z32;
  Crowdfunding_backers : (Int256Tree.t Z32);
  Crowdfunding_funded : bool
}.


Definition update_Outgoing_transfer_recipient_and_amount new_outgoing_transfer_recipient_and_amount (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type new_outgoing_transfer_recipient_and_amount (Crowdfunding_owner glabs_a) (Crowdfunding_max_block glabs_a) (Crowdfunding_goal glabs_a) (Crowdfunding_backers glabs_a) (Crowdfunding_funded glabs_a) .
Definition update_Crowdfunding_owner glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type  (Outgoing_transfer_recipient_and_amount glabs_a) glabs_b (Crowdfunding_max_block glabs_a) (Crowdfunding_goal glabs_a) (Crowdfunding_backers glabs_a) (Crowdfunding_funded glabs_a) .
Definition update_Crowdfunding_max_block glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type  (Outgoing_transfer_recipient_and_amount glabs_a) (Crowdfunding_owner glabs_a) glabs_b (Crowdfunding_goal glabs_a) (Crowdfunding_backers glabs_a) (Crowdfunding_funded glabs_a) .
Definition update_Crowdfunding_goal glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type  (Outgoing_transfer_recipient_and_amount glabs_a) (Crowdfunding_owner glabs_a) (Crowdfunding_max_block glabs_a) glabs_b (Crowdfunding_backers glabs_a) (Crowdfunding_funded glabs_a) .
Definition update_Crowdfunding_backers glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type  (Outgoing_transfer_recipient_and_amount glabs_a) (Crowdfunding_owner glabs_a) (Crowdfunding_max_block glabs_a) (Crowdfunding_goal glabs_a) glabs_b (Crowdfunding_funded glabs_a) .
Definition update_Crowdfunding_funded glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type  (Outgoing_transfer_recipient_and_amount glabs_a) (Crowdfunding_owner glabs_a) (Crowdfunding_max_block glabs_a) (Crowdfunding_goal glabs_a) (Crowdfunding_backers glabs_a) glabs_b .

Definition init_global_abstract_data : global_abstract_data_type := {|
  Outgoing_transfer_recipient_and_amount := None;
  Crowdfunding_owner := (Int256.repr 890025619261977197475349953386626580431692757011);
  Crowdfunding_max_block := (Int256.repr 140);
  Crowdfunding_goal := 50;
  Crowdfunding_backers := (Int256Tree.empty Z32);
  Crowdfunding_funded := false
|}.

Definition block := positive.
Definition global_low_level_invariant (n : block)(abd : global_abstract_data_type) := True.
End EdsgerGen.

Lemma Crowdfunding_owner_of_update_Crowdfunding_owner : forall _x (glabs_a : global_abstract_data_type),
  Crowdfunding_owner (update_Crowdfunding_owner _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite Crowdfunding_owner_of_update_Crowdfunding_owner : updates.

Lemma Crowdfunding_owner_of_update_Crowdfunding_max_block : forall _x (glabs_a : global_abstract_data_type),
  Crowdfunding_owner (update_Crowdfunding_max_block _x glabs_a) = Crowdfunding_owner glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite Crowdfunding_owner_of_update_Crowdfunding_max_block : updates.

Lemma Crowdfunding_owner_of_update_Crowdfunding_goal : forall _x (glabs_a : global_abstract_data_type),
  Crowdfunding_owner (update_Crowdfunding_goal _x glabs_a) = Crowdfunding_owner glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite Crowdfunding_owner_of_update_Crowdfunding_goal : updates.

Lemma Crowdfunding_owner_of_update_Crowdfunding_backers : forall _x (glabs_a : global_abstract_data_type),
  Crowdfunding_owner (update_Crowdfunding_backers _x glabs_a) = Crowdfunding_owner glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite Crowdfunding_owner_of_update_Crowdfunding_backers : updates.

Lemma Crowdfunding_owner_of_update_Crowdfunding_funded : forall _x (glabs_a : global_abstract_data_type),
  Crowdfunding_owner (update_Crowdfunding_funded _x glabs_a) = Crowdfunding_owner glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite Crowdfunding_owner_of_update_Crowdfunding_funded : updates.


Lemma Crowdfunding_max_block_of_update_Crowdfunding_owner : forall _x (glabs_a : global_abstract_data_type),
  Crowdfunding_max_block (update_Crowdfunding_owner _x glabs_a) = Crowdfunding_max_block glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite Crowdfunding_max_block_of_update_Crowdfunding_owner : updates.

Lemma Crowdfunding_max_block_of_update_Crowdfunding_max_block : forall _x (glabs_a : global_abstract_data_type),
  Crowdfunding_max_block (update_Crowdfunding_max_block _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite Crowdfunding_max_block_of_update_Crowdfunding_max_block : updates.

Lemma Crowdfunding_max_block_of_update_Crowdfunding_goal : forall _x (glabs_a : global_abstract_data_type),
  Crowdfunding_max_block (update_Crowdfunding_goal _x glabs_a) = Crowdfunding_max_block glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite Crowdfunding_max_block_of_update_Crowdfunding_goal : updates.

Lemma Crowdfunding_max_block_of_update_Crowdfunding_backers : forall _x (glabs_a : global_abstract_data_type),
  Crowdfunding_max_block (update_Crowdfunding_backers _x glabs_a) = Crowdfunding_max_block glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite Crowdfunding_max_block_of_update_Crowdfunding_backers : updates.

Lemma Crowdfunding_max_block_of_update_Crowdfunding_funded : forall _x (glabs_a : global_abstract_data_type),
  Crowdfunding_max_block (update_Crowdfunding_funded _x glabs_a) = Crowdfunding_max_block glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite Crowdfunding_max_block_of_update_Crowdfunding_funded : updates.


Lemma Crowdfunding_goal_of_update_Crowdfunding_owner : forall _x (glabs_a : global_abstract_data_type),
  Crowdfunding_goal (update_Crowdfunding_owner _x glabs_a) = Crowdfunding_goal glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite Crowdfunding_goal_of_update_Crowdfunding_owner : updates.

Lemma Crowdfunding_goal_of_update_Crowdfunding_max_block : forall _x (glabs_a : global_abstract_data_type),
  Crowdfunding_goal (update_Crowdfunding_max_block _x glabs_a) = Crowdfunding_goal glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite Crowdfunding_goal_of_update_Crowdfunding_max_block : updates.

Lemma Crowdfunding_goal_of_update_Crowdfunding_goal : forall _x (glabs_a : global_abstract_data_type),
  Crowdfunding_goal (update_Crowdfunding_goal _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite Crowdfunding_goal_of_update_Crowdfunding_goal : updates.

Lemma Crowdfunding_goal_of_update_Crowdfunding_backers : forall _x (glabs_a : global_abstract_data_type),
  Crowdfunding_goal (update_Crowdfunding_backers _x glabs_a) = Crowdfunding_goal glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite Crowdfunding_goal_of_update_Crowdfunding_backers : updates.

Lemma Crowdfunding_goal_of_update_Crowdfunding_funded : forall _x (glabs_a : global_abstract_data_type),
  Crowdfunding_goal (update_Crowdfunding_funded _x glabs_a) = Crowdfunding_goal glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite Crowdfunding_goal_of_update_Crowdfunding_funded : updates.


Lemma Crowdfunding_backers_of_update_Crowdfunding_owner : forall _x (glabs_a : global_abstract_data_type),
  Crowdfunding_backers (update_Crowdfunding_owner _x glabs_a) = Crowdfunding_backers glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite Crowdfunding_backers_of_update_Crowdfunding_owner : updates.

Lemma Crowdfunding_backers_of_update_Crowdfunding_max_block : forall _x (glabs_a : global_abstract_data_type),
  Crowdfunding_backers (update_Crowdfunding_max_block _x glabs_a) = Crowdfunding_backers glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite Crowdfunding_backers_of_update_Crowdfunding_max_block : updates.

Lemma Crowdfunding_backers_of_update_Crowdfunding_goal : forall _x (glabs_a : global_abstract_data_type),
  Crowdfunding_backers (update_Crowdfunding_goal _x glabs_a) = Crowdfunding_backers glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite Crowdfunding_backers_of_update_Crowdfunding_goal : updates.

Lemma Crowdfunding_backers_of_update_Crowdfunding_backers : forall _x (glabs_a : global_abstract_data_type),
  Crowdfunding_backers (update_Crowdfunding_backers _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite Crowdfunding_backers_of_update_Crowdfunding_backers : updates.

Lemma Crowdfunding_backers_of_update_Crowdfunding_funded : forall _x (glabs_a : global_abstract_data_type),
  Crowdfunding_backers (update_Crowdfunding_funded _x glabs_a) = Crowdfunding_backers glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite Crowdfunding_backers_of_update_Crowdfunding_funded : updates.


Lemma Crowdfunding_funded_of_update_Crowdfunding_owner : forall _x (glabs_a : global_abstract_data_type),
  Crowdfunding_funded (update_Crowdfunding_owner _x glabs_a) = Crowdfunding_funded glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite Crowdfunding_funded_of_update_Crowdfunding_owner : updates.

Lemma Crowdfunding_funded_of_update_Crowdfunding_max_block : forall _x (glabs_a : global_abstract_data_type),
  Crowdfunding_funded (update_Crowdfunding_max_block _x glabs_a) = Crowdfunding_funded glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite Crowdfunding_funded_of_update_Crowdfunding_max_block : updates.

Lemma Crowdfunding_funded_of_update_Crowdfunding_goal : forall _x (glabs_a : global_abstract_data_type),
  Crowdfunding_funded (update_Crowdfunding_goal _x glabs_a) = Crowdfunding_funded glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite Crowdfunding_funded_of_update_Crowdfunding_goal : updates.

Lemma Crowdfunding_funded_of_update_Crowdfunding_backers : forall _x (glabs_a : global_abstract_data_type),
  Crowdfunding_funded (update_Crowdfunding_backers _x glabs_a) = Crowdfunding_funded glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite Crowdfunding_funded_of_update_Crowdfunding_backers : updates.

Lemma Crowdfunding_funded_of_update_Crowdfunding_funded : forall _x (glabs_a : global_abstract_data_type),
  Crowdfunding_funded (update_Crowdfunding_funded _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite Crowdfunding_funded_of_update_Crowdfunding_funded : updates.

Opaque Crowdfunding_owner update_Crowdfunding_owner Crowdfunding_max_block update_Crowdfunding_max_block Crowdfunding_goal update_Crowdfunding_goal Crowdfunding_backers update_Crowdfunding_backers Crowdfunding_funded update_Crowdfunding_funded.
