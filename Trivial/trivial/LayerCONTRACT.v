(* WARNING: This file is generated by Edsger, the DeepSEA compiler.
            All modification will be lost when regenerating. *)
(* Module trivial.LayerCONTRACT for trivial.ds *)
Require Import BinPos.
Require Import DeepSpec.Runtime.
Require Import trivial.EdsgerIdents.
Require Import trivial.DataTypes.
Require Import trivial.DataTypeOps.
Require Import trivial.DataTypeProofs.
Require Import DeepSpec.lib.Monad.Monad.
Require Import DeepSpec.lib.Monad.MonadState.
Require Import DeepSpec.lib.Monad.StateMonad.
Require Import DeepSpec.lib.Monad.OptionMonad.
Require Import DeepSpec.lib.Monad.MonadZero.
Require Import DeepSpec.core.SynthesisStmt.
Require Import DeepSpec.core.SynthesisFunc.
Require Import backend.MachineModel.
Existing Instance MonadState_DS.
Existing Instance MonadZero_DS.

Section EdsgerGen.



Context {memModelOps : MemoryModelOps mem}.
Instance GlobalLayerSpec : LayerSpecClass := {
  memModelOps := memModelOps;
  GetHighData := global_abstract_data_type 
}.


Context`{global_abdata : !GlobalAbData init_global_abstract_data global_low_level_invariant}.
Definition CONTRACT_kernel_mode (abd : global_abstract_data_type) := True.
Global Arguments CONTRACT_kernel_mode / abd.

Class Layer_CONTRACT_Context_prf  := {
  (* ensuring global empty data matches those in the object definitions *)
  CONTRACT_init_Trivial_seenTrueYet_eq : Trivial_seenTrueYet init_global_abstract_data = false
}.
Context`{CTXT_prf : !Layer_CONTRACT_Context_prf}.

Instance CONTRACT_data_ops : CompatDataOps global_abstract_data_type := {
  empty_data := init_global_abstract_data;
  high_level_invariant d := True;
}.

Instance CONTRACT_data : CompatData global_abstract_data_type := {
empty_data_high_level_invariant := I
}.

Instance CONTRACT_overlay_spec : OverlaySpecClass := {
}.



Instance CONTRACT_underlay_spec : UnderlaySpecClass := {
  cdataOpsLow := @BuiltinBase_data_ops GlobalLayerSpec init_global_abstract_data;
  cdataLow := BuiltinBase_data;
}.


Section OBJECT_Trivial_DEFINITION.
  Context`{HM : !HyperMem}.

  (* Object variables *)
  Definition Trivial_seenTrueYet_var := {|
    ltype_tp_marker := tint_bool;

    ltype_ident := HighValues.Field HighValues.Global var_Trivial_Trivial_seenTrueYet_ident;
    ltype_ghost := false;

    ltype_get := Trivial_seenTrueYet;
    ltype_set := update_Trivial_seenTrueYet;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.

  Definition Trivial_constructor := {|
    FC_ident_start := BuiltinBase_local_ident_start;
    FC_params := nil;
    FC_returns := void_unit_pair;
    FC_body := (CCsequence
      (CCsequence
        (CCstore
          (LCvar Trivial_seenTrueYet_var)
          (ECconst_int256 tint_bool false Int256.zero))
        CCskip)
      CCskip)
  |}.
  Lemma Trivial_constructor_wf
      : synth_func_wellformed Trivial_constructor.
  Proof. solve_wellformed. Defined.
  Definition Trivial_constructor_opt : machine_env GetHighData -> DS unit  := 
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Trivial_seenTrueYet update_Trivial_seenTrueYet]
  in synth_func_spec_opt Trivial_constructor Trivial_constructor_wf.
  Definition Trivial_constructor_spec_hlist_opt args :=
    @apply_param_func Trivial_constructor.(FC_params) _
                      (Trivial_constructor_opt) args.

(* CEI stands for Checks Effects Interactions (pattern) and the definitions below are used
    to keep track of the safe situations in which a primitive can be called. See also
    CEIP_prf in Syntax.v and for the tactic definitions see Runtime.v *)
    
Lemma Trivial_constructor_follows_CEIP : { rsts | CEIP_function_prf (fst rsts) Trivial_constructor (snd rsts)}.
Proof.
  unfold Trivial_constructor.
  verify_checks_effects_interactions_pattern. (* If this tactic fails then it indicates that a strict version of the Checks-Effects-Interactions pattern was not followed in the function: Trivial_constructor. *)
Defined.

Definition Trivial_constructor_CEIP_color_before := fst (proj1_sig Trivial_constructor_follows_CEIP).
Definition Trivial_constructor_CEIP_color_after := snd (proj1_sig Trivial_constructor_follows_CEIP).

  Definition Trivial_constructor_prim := {|
    PRIMident := ident_Trivial_constructor;
    (* PRIMcc := AST.cc_default; *)
    PRIMghost := false;
    PRIMpure := false;
    PRIMargt_marker := Trivial_constructor.(FC_params);
    PRIMret_marker := Trivial_constructor.(FC_returns);
    PRIMceip_color_before := Trivial_constructor_CEIP_color_before;
    PRIMceip_color_after := Trivial_constructor_CEIP_color_after;
    PRIMcond := fun _ _ _ => True;
    (* PRIMsem := Trivial_constructor_spec_hlist; *)
    PRIMsem_opt := Trivial_constructor_spec_hlist_opt
  |}.

  Lemma Trivial_constructor_spec_hlist_opt_eq :
    Trivial_constructor_spec_hlist_opt =
    fun args => apply_param_func
      (synth_func_spec_opt Trivial_constructor Trivial_constructor_wf)
      args.
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Trivial_seenTrueYet update_Trivial_seenTrueYet]. 
     reflexivity.
  Qed.
  Definition Trivial_constructor_cfun :=
  Eval cbv in synth_func_func Trivial_constructor.

  Definition Trivial_constructor_cond  me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Trivial_seenTrueYet update_Trivial_seenTrueYet]
    in
    high_level_invariant d ->
    synth_func_cond Trivial_constructor Trivial_constructor_wf
								      me d.
  
  Lemma Trivial_constructor_cond_eq : forall  me d, 
    Trivial_constructor_cond  me d ->
    high_level_invariant d ->
    synth_func_cond Trivial_constructor Trivial_constructor_wf  me d.
    Proof.
      intros  me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Trivial_seenTrueYet update_Trivial_seenTrueYet].
       exact H_cond.
    Qed.

  Definition Trivial_constructor_obligation  me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Trivial_seenTrueYet update_Trivial_seenTrueYet]
    in
    high_level_invariant d ->
    synth_func_obligation Trivial_constructor Trivial_constructor_wf
								      me d.
  
  Lemma Trivial_constructor_obligation_eq : forall  me d, 
    Trivial_constructor_obligation  me d ->
    high_level_invariant d ->
    synth_func_obligation Trivial_constructor Trivial_constructor_wf  me d.
    Proof.
      intros  me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Trivial_seenTrueYet update_Trivial_seenTrueYet].
       exact H_cond.
    Qed.

  Definition Trivial_constructor_spec :=
  Eval cbv [sf_mem sf_return fst snd Trivial_constructor_opt] in
    fun  me => execStateT (Trivial_constructor_opt me).
  Lemma Trivial_constructor_spec_eq :
    Trivial_constructor_spec =
    fun  me => execStateT (synth_func_spec_opt Trivial_constructor Trivial_constructor_wf me).
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

          Trivial_seenTrueYet update_Trivial_seenTrueYet].
    reflexivity.
  Qed.

Global Opaque Trivial_constructor_opt.

  Definition Trivial_boolToInt := {|
    FC_ident_start := BuiltinBase_local_ident_start;
    FC_params := (cons (* b : *) int_bool_pair nil);
    FC_returns := int_Z32_pair;
    FC_body := (CCifthenelse (ECtempvar tint_bool 11%positive (* b *))
      (CCyield (ECconst_int256 tint_Z32 1 (Int256.repr 1)))
      (CCyield (ECconst_int256 tint_Z32 0 (Int256.repr 0))))
  |}.
  Lemma Trivial_boolToInt_wf
      : synth_func_wellformed Trivial_boolToInt.
  Proof. solve_wellformed. Defined.
  Definition Trivial_boolToInt_opt :bool ->  machine_env GetHighData -> DS Z32  := 
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Trivial_seenTrueYet update_Trivial_seenTrueYet]
  in synth_func_spec_opt Trivial_boolToInt Trivial_boolToInt_wf.
  Definition Trivial_boolToInt_spec_hlist_opt args :=
    @apply_param_func Trivial_boolToInt.(FC_params) _
                      (Trivial_boolToInt_opt) args.

(* CEI stands for Checks Effects Interactions (pattern) and the definitions below are used
    to keep track of the safe situations in which a primitive can be called. See also
    CEIP_prf in Syntax.v and for the tactic definitions see Runtime.v *)
    
Lemma Trivial_boolToInt_follows_CEIP : { rsts | CEIP_function_prf (fst rsts) Trivial_boolToInt (snd rsts)}.
Proof.
  unfold Trivial_boolToInt.
  verify_checks_effects_interactions_pattern. (* If this tactic fails then it indicates that a strict version of the Checks-Effects-Interactions pattern was not followed in the function: Trivial_boolToInt. *)
Defined.

Definition Trivial_boolToInt_CEIP_color_before := fst (proj1_sig Trivial_boolToInt_follows_CEIP).
Definition Trivial_boolToInt_CEIP_color_after := snd (proj1_sig Trivial_boolToInt_follows_CEIP).

  Definition Trivial_boolToInt_prim := {|
    PRIMident := ident_Trivial_boolToInt;
    (* PRIMcc := AST.cc_default; *)
    PRIMghost := false;
    PRIMpure := true;
    PRIMargt_marker := Trivial_boolToInt.(FC_params);
    PRIMret_marker := Trivial_boolToInt.(FC_returns);
    PRIMceip_color_before := Trivial_boolToInt_CEIP_color_before;
    PRIMceip_color_after := Trivial_boolToInt_CEIP_color_after;
    PRIMcond := fun _ _ _ => True;
    (* PRIMsem := Trivial_boolToInt_spec_hlist; *)
    PRIMsem_opt := Trivial_boolToInt_spec_hlist_opt
  |}.

  Lemma Trivial_boolToInt_spec_hlist_opt_eq :
    Trivial_boolToInt_spec_hlist_opt =
    fun args => apply_param_func
      (synth_func_spec_opt Trivial_boolToInt Trivial_boolToInt_wf)
      args.
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Trivial_seenTrueYet update_Trivial_seenTrueYet]. 
     reflexivity.
  Qed.
  Definition Trivial_boolToInt_cfun :=
  Eval cbv in synth_func_func Trivial_boolToInt.

  Definition Trivial_boolToInt_cond  a0 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Trivial_seenTrueYet update_Trivial_seenTrueYet]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    high_level_invariant d ->
    synth_func_cond Trivial_boolToInt Trivial_boolToInt_wf
								      a0 me d.
  
  Lemma Trivial_boolToInt_cond_eq : forall  a0 me d, 
    Trivial_boolToInt_cond  a0 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    high_level_invariant d ->
    synth_func_cond Trivial_boolToInt Trivial_boolToInt_wf  a0 me d.
    Proof.
      intros  a0 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Trivial_seenTrueYet update_Trivial_seenTrueYet].
       exact H_cond.
    Qed.

  Definition Trivial_boolToInt_obligation  a0 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Trivial_seenTrueYet update_Trivial_seenTrueYet]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    high_level_invariant d ->
    synth_func_obligation Trivial_boolToInt Trivial_boolToInt_wf
								      a0 me d.
  
  Lemma Trivial_boolToInt_obligation_eq : forall  a0 me d, 
    Trivial_boolToInt_obligation  a0 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    high_level_invariant d ->
    synth_func_obligation Trivial_boolToInt Trivial_boolToInt_wf  a0 me d.
    Proof.
      intros  a0 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Trivial_seenTrueYet update_Trivial_seenTrueYet].
       exact H_cond.
    Qed.

  Definition Trivial_boolToInt_spec :=
  Eval cbv [sf_mem sf_return fst snd Trivial_boolToInt_opt] in
    fun  a0 me => evalStateT (Trivial_boolToInt_opt a0 me).
  Lemma Trivial_boolToInt_spec_eq :
    Trivial_boolToInt_spec =
    fun  a0 me => evalStateT (synth_func_spec_opt Trivial_boolToInt Trivial_boolToInt_wf a0 me).
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

          Trivial_seenTrueYet update_Trivial_seenTrueYet].
    reflexivity.
  Qed.

Global Opaque Trivial_boolToInt_opt.

  Definition Trivial_boolToIntTracker := {|
    FC_ident_start := BuiltinBase_local_ident_start;
    FC_params := (cons (* b : *) int_bool_pair nil);
    FC_returns := int_Z32_pair;
    FC_body := (CCifthenelse (ECtempvar tint_bool 11%positive (* b *))
      (CCsequence
        (CCstore
          (LCvar Trivial_seenTrueYet_var)
          (ECconst_int256 tint_bool true Int256.one))
        (CCyield (ECconst_int256 tint_Z32 1 (Int256.repr 1))))
      (CCyield (ECconst_int256 tint_Z32 0 (Int256.repr 0))))
  |}.
  Lemma Trivial_boolToIntTracker_wf
      : synth_func_wellformed Trivial_boolToIntTracker.
  Proof. solve_wellformed. Defined.
  Definition Trivial_boolToIntTracker_opt :bool ->  machine_env GetHighData -> DS Z32  := 
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Trivial_seenTrueYet update_Trivial_seenTrueYet]
  in synth_func_spec_opt Trivial_boolToIntTracker Trivial_boolToIntTracker_wf.
  Definition Trivial_boolToIntTracker_spec_hlist_opt args :=
    @apply_param_func Trivial_boolToIntTracker.(FC_params) _
                      (Trivial_boolToIntTracker_opt) args.

(* CEI stands for Checks Effects Interactions (pattern) and the definitions below are used
    to keep track of the safe situations in which a primitive can be called. See also
    CEIP_prf in Syntax.v and for the tactic definitions see Runtime.v *)
    
Lemma Trivial_boolToIntTracker_follows_CEIP : { rsts | CEIP_function_prf (fst rsts) Trivial_boolToIntTracker (snd rsts)}.
Proof.
  unfold Trivial_boolToIntTracker.
  verify_checks_effects_interactions_pattern. (* If this tactic fails then it indicates that a strict version of the Checks-Effects-Interactions pattern was not followed in the function: Trivial_boolToIntTracker. *)
Defined.

Definition Trivial_boolToIntTracker_CEIP_color_before := fst (proj1_sig Trivial_boolToIntTracker_follows_CEIP).
Definition Trivial_boolToIntTracker_CEIP_color_after := snd (proj1_sig Trivial_boolToIntTracker_follows_CEIP).

  Definition Trivial_boolToIntTracker_prim := {|
    PRIMident := ident_Trivial_boolToIntTracker;
    (* PRIMcc := AST.cc_default; *)
    PRIMghost := false;
    PRIMpure := false;
    PRIMargt_marker := Trivial_boolToIntTracker.(FC_params);
    PRIMret_marker := Trivial_boolToIntTracker.(FC_returns);
    PRIMceip_color_before := Trivial_boolToIntTracker_CEIP_color_before;
    PRIMceip_color_after := Trivial_boolToIntTracker_CEIP_color_after;
    PRIMcond := fun _ _ _ => True;
    (* PRIMsem := Trivial_boolToIntTracker_spec_hlist; *)
    PRIMsem_opt := Trivial_boolToIntTracker_spec_hlist_opt
  |}.

  Lemma Trivial_boolToIntTracker_spec_hlist_opt_eq :
    Trivial_boolToIntTracker_spec_hlist_opt =
    fun args => apply_param_func
      (synth_func_spec_opt Trivial_boolToIntTracker Trivial_boolToIntTracker_wf)
      args.
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Trivial_seenTrueYet update_Trivial_seenTrueYet]. 
     reflexivity.
  Qed.
  Definition Trivial_boolToIntTracker_cfun :=
  Eval cbv in synth_func_func Trivial_boolToIntTracker.

  Definition Trivial_boolToIntTracker_cond  a0 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Trivial_seenTrueYet update_Trivial_seenTrueYet]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    high_level_invariant d ->
    synth_func_cond Trivial_boolToIntTracker Trivial_boolToIntTracker_wf
								      a0 me d.
  
  Lemma Trivial_boolToIntTracker_cond_eq : forall  a0 me d, 
    Trivial_boolToIntTracker_cond  a0 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    high_level_invariant d ->
    synth_func_cond Trivial_boolToIntTracker Trivial_boolToIntTracker_wf  a0 me d.
    Proof.
      intros  a0 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Trivial_seenTrueYet update_Trivial_seenTrueYet].
       exact H_cond.
    Qed.

  Definition Trivial_boolToIntTracker_obligation  a0 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Trivial_seenTrueYet update_Trivial_seenTrueYet]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    high_level_invariant d ->
    synth_func_obligation Trivial_boolToIntTracker Trivial_boolToIntTracker_wf
								      a0 me d.
  
  Lemma Trivial_boolToIntTracker_obligation_eq : forall  a0 me d, 
    Trivial_boolToIntTracker_obligation  a0 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    high_level_invariant d ->
    synth_func_obligation Trivial_boolToIntTracker Trivial_boolToIntTracker_wf  a0 me d.
    Proof.
      intros  a0 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             Trivial_seenTrueYet update_Trivial_seenTrueYet].
       exact H_cond.
    Qed.

  Definition Trivial_boolToIntTracker_spec :=
  Eval cbv [sf_mem sf_return fst snd Trivial_boolToIntTracker_opt] in
    fun  a0 me => runStateT (Trivial_boolToIntTracker_opt a0 me).
  Lemma Trivial_boolToIntTracker_spec_eq :
    Trivial_boolToIntTracker_spec =
    fun  a0 me => runStateT (synth_func_spec_opt Trivial_boolToIntTracker Trivial_boolToIntTracker_wf a0 me).
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

          Trivial_seenTrueYet update_Trivial_seenTrueYet].
    reflexivity.
  Qed.

Global Opaque Trivial_boolToIntTracker_opt.
End OBJECT_Trivial_DEFINITION.

End EdsgerGen.
